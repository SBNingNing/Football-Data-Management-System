// useAdminBoardPage (inlined) – already had full logic at root; ensure preserved
import { ref, reactive, computed, nextTick } from 'vue'
import { useAuthStore, useTeamStore, useMatchStore, useEventStore, usePlayerStore } from '@/store/modules'
import { ElMessage, ElMessageBox } from 'element-plus'
import logger from '@/utils/logger'
export function useAdminBoardPage(){
	const authStore = useAuthStore(); const teamStore = useTeamStore(); const matchStore = useMatchStore(); const eventStore = useEventStore(); const playerStore = usePlayerStore()
	const activeTab = ref('manage'); const manageMatchType = ref(''); const loading = computed(()=> teamStore.loading || matchStore.loading || eventStore.loading || playerStore.loading)
	const dataInputRef = ref(null)
	const editTeamDialog = ref(false); const editMatchDialog = ref(false); const editEventDialog = ref(false); const editPlayerDialog = ref(false)
	const editTeamForm = reactive({ id:'', teamName:'', matchType:'', players:[] })
	const editMatchForm = reactive({ id:'', matchName:'', team1:'', team2:'', date:'', location:'', matchType:'' })
	const editEventForm = reactive({ id:'', matchName:'', eventType:'', playerName:'', eventTime:'', matchType:'' })
	const editPlayerForm = reactive({ id:'', name:'', number:'', studentId:'', teamName:'', matchType:'' })
	const teams = computed(()=> teamStore.list); const matches = computed(()=> matchStore.list); const events = computed(()=> eventStore.list); const players = computed(()=> playerStore.list)
	async function loadAllData(){ teamStore.loading = true; try { logger.info('[admin/board] start loading data (composable)'); const results = await Promise.allSettled([ teamStore.loadAll(), matchStore.loadAll(), eventStore.loadAll(), playerStore.loadAll() ]); const names=['球队','比赛','事件','球员']; results.forEach((r,i)=>{ if(r.status==='rejected'){ logger.error(`[admin/board] 加载${names[i]}数据失败`, r.reason); ElMessage.warning(`加载${names[i]}数据失败: ${r.reason?.message || '未知错误'}`) } else if(r.value && !r.value.success){ logger.error(`[admin/board] 加载${names[i]}数据失败`, r.value.error); ElMessage.warning(`加载${names[i]}数据失败: ${r.value.error}`) } else { logger.info(`[admin/board] 加载${names[i]}数据成功`) } }); logger.info('[admin/board] 数据加载完成', { counts:{ teams:teams.value.length, matches:matches.value.length, events:events.value.length, players:players.value.length } }) } catch(err){ logger.error('[admin/board] 加载数据失败', err); ElMessage.error('数据加载失败，请刷新页面重试') } finally { teamStore.loading=false } }
	function handleFilterChange(matchType){ manageMatchType.value = matchType }
	function scrollToInputModule(moduleType){ if(dataInputRef.value?.scrollToModule){ dataInputRef.value.scrollToModule(moduleType) } }
	function handleInputTypeClick(inputType){ if(activeTab.value !== 'input'){ activeTab.value='input'; nextTick(()=> scrollToInputModule(inputType)) } else { scrollToInputModule(inputType) } }
	async function handleTeamSubmit(teamData){ try { const result = await teamStore.create(teamData); if(result.success){ ElMessage.success('球队信息录入成功'); await teamStore.loadAll() } else { ElMessage.error(result.error || '球队信息录入失败') } } catch(e){ logger.error('录入球队失败', e); ElMessage.error('球队信息录入失败') } }
	async function handleScheduleSubmit(scheduleData){ try { const result = await matchStore.create(scheduleData); if(result.success){ ElMessage.success('赛程信息录入成功'); await matchStore.loadAll() } else { ElMessage.error(result.error || '赛程信息录入失败') } } catch(e){ logger.error('录入赛程失败', e); ElMessage.error('赛程信息录入失败') } }
	async function handleEventSubmit(eventData){ if(!eventData.matchName){ ElMessage.error('请选择比赛'); return } if(eventData.events.length===0){ ElMessage.error('请至少添加一个事件'); return } try { const promises = eventData.events.map(ev=> eventStore.create({ matchName:eventData.matchName, eventType:ev.eventType, playerName:ev.playerName, eventTime:ev.eventTime, matchType:eventData.matchType })); const results = await Promise.all(promises); const successCount = results.filter(r=>r.success).length; if(successCount===eventData.events.length){ ElMessage.success(`成功录入 ${successCount} 个事件`); await eventStore.loadAll() } else { ElMessage.warning(`录入了 ${successCount}/${eventData.events.length} 个事件`) } } catch(e){ logger.error('事件信息录入失败', e); ElMessage.error('事件信息录入失败') } }
	function editTeam(team){ logger.info('[admin/board] 编辑球队', team?.id); Object.assign(editTeamForm,{ id:team.id, teamName:team.teamName, matchType:team.matchType, players:team.players ? [...team.players]:[] }); editTeamDialog.value=true }
	function addEditPlayer(){ editTeamForm.players.push({ name:'', number:'', studentId:'' }) }
	function removeEditPlayer(index){ editTeamForm.players.splice(index,1) }
	async function updateTeam(){ const result = await teamStore.update(editTeamForm.id, editTeamForm); if(result.success){ ElMessage.success('球队信息更新成功'); editTeamDialog.value=false } else { ElMessage.error(result.error || '球队信息更新失败') } }
	function deleteTeam(teamId){ ElMessageBox.confirm('此操作将永久删除该球队, 是否继续?','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(async ()=>{ const result = await teamStore.remove(teamId); if(result.success) ElMessage.success('删除成功'); else ElMessage.error(result.error || '删除失败') }).catch(()=>{}) }
	function editMatch(match){ Object.assign(editMatchForm,{ id:match.id, matchName:match.matchName, team1:match.team1, team2:match.team2, date:match.date, location:match.location, matchType:match.matchType }); editMatchDialog.value=true }
	async function updateMatch(){ const result = await matchStore.update(editMatchForm.id, editMatchForm); if(result.success){ ElMessage.success('比赛信息更新成功'); editMatchDialog.value=false } else { ElMessage.error(result.error || '比赛信息更新失败') } }
	function deleteMatch(matchId){ ElMessageBox.confirm('此操作将永久删除该比赛, 是否继续?','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(async ()=>{ const result = await matchStore.remove(matchId); if(result.success) ElMessage.success('删除成功'); else ElMessage.error(result.error || '删除失败') }).catch(()=>{}) }
	function editEvent(event){ Object.assign(editEventForm,{ id:event.id, matchName:event.matchName, eventType:event.eventType, playerName:event.playerName, eventTime:event.eventTime, matchType:event.matchType }); editEventDialog.value=true }
	async function updateEvent(){ const result = await eventStore.update(editEventForm.id, editEventForm); if(result.success){ ElMessage.success('事件信息更新成功'); editEventDialog.value=false } else { ElMessage.error(result.error || '事件信息更新失败') } }
	function deleteEvent(eventId){ ElMessageBox.confirm('此操作将永久删除该事件, 是否继续?','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(async ()=>{ const result = await eventStore.remove(eventId); if(result.success) ElMessage.success('删除成功'); else ElMessage.error(result.error || '删除失败') }).catch(()=>{}) }
	function editPlayer(player){ Object.assign(editPlayerForm,{ id:player.id || player.studentId, name:player.name, number:player.number, studentId:player.studentId || player.id, teamName:player.teamName, matchType:player.matchType }); editPlayerDialog.value=true }
	async function updatePlayer(){ try { const playerId = editPlayerForm.id || editPlayerForm.studentId; const result = await playerStore.update(playerId, editPlayerForm); if(result.success){ ElMessage.success('球员信息更新成功'); editPlayerDialog.value=false; await playerStore.loadAll() } else { ElMessage.error(result.error || '球员信息更新失败') } } catch(e){ logger.error('更新球员失败', e); ElMessage.error('球员信息更新失败') } }
	function deletePlayer(playerId){ ElMessageBox.confirm('此操作将永久删除该球员, 是否继续?','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(async ()=>{ try { const result = await playerStore.remove(playerId); if(result.success) ElMessage.success('删除成功'); else ElMessage.error(result.error || '删除失败') } catch(e){ logger.error('删除球员失败', e); ElMessage.error('删除失败') } }).catch(()=>{}) }
	function completeMatch(matchId){ ElMessageBox.confirm('确定要标记该比赛为已完赛吗？','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(async ()=>{ try { const result = await matchStore.complete(matchId); if(result.success){ ElMessage.success('比赛已标记为完赛'); await matchStore.loadAll() } else { ElMessage.error(result.error || '操作失败') } } catch(e){ logger.error('完赛操作失败', e); ElMessage.error('操作失败，请重试') } }).catch(()=>{}) }
	function logout(){ ElMessageBox.confirm('确定要退出登录吗？','提示',{ confirmButtonText:'确定', cancelButtonText:'取消', type:'warning' }).then(()=>{ authStore.logout(); localStorage.removeItem('userToken'); localStorage.removeItem('userInfo'); sessionStorage.clear(); ElMessage.success('已退出登录'); setTimeout(()=>{ window.location.href='/login' },500) }).catch(()=>{}) }
	return { activeTab, manageMatchType, loading, editTeamDialog, editMatchDialog, editEventDialog, editPlayerDialog, editTeamForm, editMatchForm, editEventForm, editPlayerForm, teams, matches, events, players, dataInputRef, loadAllData, handleFilterChange, handleInputTypeClick, handleTeamSubmit, handleScheduleSubmit, handleEventSubmit, editTeam, addEditPlayer, removeEditPlayer, updateTeam, deleteTeam, editMatch, updateMatch, deleteMatch, editEvent, updateEvent, deleteEvent, editPlayer, updatePlayer, deletePlayer, completeMatch, logout }
}